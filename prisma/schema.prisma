generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Department {
  LAB
  HR
  NURSE
  STAFF
  MANAGEMENT
  DOCTOR
}

enum PatientStatus {
  Critical
  Good
  Bad
  Emergency
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  email     String    @unique
  role      Role      @default(USER)
  image     String?
  employee  Employee?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Employee {
  id         Int        @id @default(autoincrement())
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [id])
  firstName  String
  lastName   String
  department Department @default(STAFF)
  schedules  Schedule[] // One-to-many relationship with Schedule
  doctor     Doctor? // One-to-one relationship with Doctor
  payroll    Payroll[] // One-to-many relationship with Payroll (for historical payroll records)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Payroll {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  month       Int
  basicSalary Int
  paidLeaves  Int      @default(21)
  deductions  Float?
  netSalary   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Schedule {
  id          Int       @id @default(autoincrement())
  employeeId  Int?
  employee    Employee? @relation(fields: [employeeId], references: [id])
  dayOfWeek   DayOfWeek
  startTime   DateTime
  endTime     DateTime
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Doctor {
  id             Int            @id @default(autoincrement())
  employeeId     Int            @unique
  employee       Employee       @relation(fields: [employeeId], references: [id])
  specialization String?
  medicalLicense String?
  department     Department     @default(DOCTOR) // Default department for Doctor
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  patients       Patient[] // One-to-many relationship with Patient
  prescriptions  Prescription[] // One-to-many relationship with Prescription
}

model Patient {
  id             Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  gender         String
  BMI            Float            @default(22.4)
  Weight         Int              @default(92)
  Height         Int              @default(175)
  BP             Int              @default(124)
  Address        String?          @default("Dhaka")
  Occupation     String?          @default("Unknown")
  doctorId       Int
  status         PatientStatus    @default(Good)
  doctor         Doctor           @relation(fields: [doctorId], references: [id])
  medicalHistory MedicalHistory[] // One-to-many relationship with MedicalHistory
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  prescriptions  Prescription[] // Many-to-many relationship with Doctor through Prescription
  Bill           Bill[] // One-to-many relationship with Bill
  Operation      Operation[] // One-to-many relationship with Operations
}

model MedicalHistory {
  id        Int      @id @default(autoincrement())
  patientId Int
  patient   Patient  @relation(fields: [patientId], references: [id])
  condition String
  diagnosis String
  date      DateTime
}

model Prescription {
  id           Int        @id @default(autoincrement())
  doctorId     Int
  doctor       Doctor     @relation(fields: [doctorId], references: [id])
  patientId    Int
  patient      Patient    @relation(fields: [patientId], references: [id])
  medicines    Medicine[] // One-to-many relation with Medicine
  labTests     LabTest[] // One-to-many relation with LabTest
  dosage       String // Dosage instructions
  instructions String? // Additional instructions for the patient
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Medicine {
  id             Int          @id @default(autoincrement())
  name           String // Name of the medicine
  description    String? // Description of the medicine
  cost           Float // Cost of the medicine
  quantity       Int // Quantity of the medicine
  inventoryId    Int // Foreign key for Inventory
  inventory      Inventory    @relation(fields: [inventoryId], references: [id]) // Many-to-one relation with Inventory
  prescriptionId Int // Foreign key for Prescription
  prescription   Prescription @relation(fields: [prescriptionId], references: [id]) // One-to-many relation with Prescription
  bills          Bill[] // Many-to-many relation with Bill
}

model LabTest {
  id             Int          @id @default(autoincrement())
  name           String // Name of the lab test
  description    String? // Description of the lab test
  cost           Float // Cost of the lab test
  report         String? // Lab test report
  prescriptionId Int // Foreign key for Prescription
  prescription   Prescription @relation(fields: [prescriptionId], references: [id]) // One-to-many relation with Prescription
  bills          Bill[] // Many-to-many relation with Bill
}

model Inventory {
  id          Int        @id @default(autoincrement())
  medicines   Medicine[] // One-to-many relation with Medicine
  stock       Int // Current stock of the inventory
  restockDate DateTime? // Date when the next restock will occur
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Bill {
  id          Int         @id @default(autoincrement())
  patientId   Int // Foreign key for Patient
  patient     Patient     @relation(fields: [patientId], references: [id])
  totalAmount Float // Total bill amount
  medicines   Medicine[] // Linked prescribed medicines
  labTests    LabTest[] // Linked lab tests
  operations  Operation[] // Linked operations
  status      String // e.g. "Paid", "Pending"
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Operation {
  id          Int      @id @default(autoincrement())
  patientId   Int // Foreign key for Patient
  patient     Patient  @relation(fields: [patientId], references: [id])
  name        String // Name of the operation
  description String? // Description of the operation
  cost        Float // Cost of the operation
  date        DateTime // Date of the operation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Bill        Bill?    @relation(fields: [billId], references: [id])
  billId      Int?
}
